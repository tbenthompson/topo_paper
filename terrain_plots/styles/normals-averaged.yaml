sources:
    mapzen:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: mapzen-tDHBHDp
        max_zoom: 16
    normals:
        type: Raster
        url: https://tile.mapzen.com/mapzen/terrain/v1/normal/{z}/{x}/{y}.png
        url_params:
            api_key: mapzen-tDHBHDp
        max_zoom: 15

styles: 
    hillshade:
        base: raster
        lighting: false
        shaders:
            blocks:
                global: |
                    float normpdf(in float x, in float sigma) {
                        return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
                    }

                color: |
                    //declare stuff
                    const int mSize = 11;
                    const int kSize = (mSize-1)/2;
                    float kernel[mSize];
                    vec3 final_colour = vec3(0.0);

                    //create the 1-D kernel
                    float sigma = 7.0;
                    float Z = 0.0;
                    for (int j = 0; j <= kSize; ++j) {
                        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);
                    }

                    //get the normalization factor (as the gaussian has been clamped)
                    for (int j = 0; j < mSize; ++j) {
                        Z += kernel[j];
                    }

                    //read out the texels
                    for (int i=-kSize; i <= kSize; ++i) {
                        for (int j=-kSize; j <= kSize; ++j) {
                            final_colour += kernel[kSize+j]*kernel[kSize+i]*sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + vec2(float(i),float(j)))).rgb;
                        }
                    }

                    color = vec4(final_colour/(Z*Z), 1.0);

layers:
    terrain:
        data: { source: normals, layer: _default }
        draw:
            hillshade:
                order: 0
