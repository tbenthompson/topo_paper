sources:
    normals:
        type: Raster
        url: https://tile.mapzen.com/mapzen/terrain/v1/normal/{z}/{x}/{y}.png
        url_params:
            api_key: mapzen-tDHBHDp
        max_zoom: 15

lights:
    directional1:
        type: directional
        direction: [0.5,-0.7,-0.5]
        diffuse: [1, 1.000, 0.75]
        ambient: [0.2, 0.3, 0.3]

styles: 
    hillshade:
        base: raster
        raster: normal
        shaders:
            blocks:
                global: |
                    float normpdf(in float x, in float sigma) {
                        return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
                    }

                normal: |
                    //declare stuff
                    const int mSize = 17;
                    const int kSize = (mSize-1)/2;
                    float kernel[mSize];
                    vec3 final_colour = vec3(0.0);

                    //create the 1-D kernel
                    float sigma = 7.0;
                    float Z = 0.0;
                    for (int j = 0; j <= kSize; ++j) {
                        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);
                    }

                    //get the normalization factor (as the gaussian has been clamped)
                    for (int j = 0; j < mSize; ++j) {
                        Z += kernel[j];
                    }

                    //read out the texels
                    for (int i=-kSize; i <= kSize; ++i) {
                        for (int j=-kSize; j <= kSize; ++j) {
                            final_colour += kernel[kSize+j]*kernel[kSize+i]*sampleRasterAtPixel(0, vec2(currentRasterPixel(0) + vec2(float(i),float(j)))).rgb;
                        }
                    }

                    // if (dot(final_colour, normal) < 0.24) {
                    // normal = vec3(final_colour/(Z*Z));
                    // normal = vec3(final_colour * (1.-dot(final_colour, normal))/(Z*Z) );
                    // normal = vec3(final_colour/(Z*Z) * 1.-dot(final_colour, normal));
                    // }
                    // normal = vec3(final_colour/(Z*Z) ) * ( 1. - dot(final_colour, normal));
                    normal = vec3(final_colour/(Z*Z) ) *dot(final_colour, normal);
                    normal.z *= 1./((.05 * float(mSize) - .23));

layers:
    terrain:
        data: { source: normals, layer: _default }
        draw:
            hillshade:
                order: 0